import logging

from aiogram import Bot, Dispatcher, executor, filters, types

from config import API
from database import DBCtrl

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API)
dp = Dispatcher(bot)


WELCOME_MESSAGE = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∏–∑ –ê—Ç–ª–∞—à–µ–≤–æ!
–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É –æ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*"""

BUTTON1_TEXT = "üêÑ–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BUTTON_ADMIN_KEY = "üë®üèø‚Äçü¶≥–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤üë®üèø‚Äçü¶≥"
ADMINS = [243568054, 427018143]
# TODO: –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    if message.from_user.id in ADMINS:
        kb = [
            [types.KeyboardButton(text=BUTTON_ADMIN_KEY)],
            [types.KeyboardButton(text=BUTTON1_TEXT)],
        ]
    else:
        kb = [
            [types.KeyboardButton(text=BUTTON1_TEXT)],
        ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(WELCOME_MESSAGE, parse_mode="markdown", reply_markup=keyboard)


@dp.message_handler(filters.Text(BUTTON1_TEXT))
async def review(message: types.Message):
    keyboard_remove = types.ReplyKeyboardRemove()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=keyboard_remove)
    DBCtrl.create_review_record(message.from_user.id)


@dp.message_handler(content_types=["text"])
async def review_message(message: types.Message):
    # TODO: —Å–¥–µ–ª–∞—Ç—å FSM
    if DBCtrl.get_review_without_message(message.from_user.id):
        DBCtrl.update_review_message(message.from_user.id, message.text)
        await message.answer("C–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    else:
        await send_welcome(message)


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def review_photo(message: types.Message):
    if user_review := DBCtrl.get_review_without_message(message.from_user.id):
        DBCtrl.create_photo(
            photo_data=message.photo[-1].file_id, review_id=user_review.key_id
        )
        # TODO: –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ä–∞–∑ —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 –≤—ã–≤–æ–¥!
        await message.answer("—Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        await message.answer("–ù–ê–•–ï–† –ú–ù–ï –¢–í–û–Ø –§–û–¢–ö–ê!?")


# TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–∑—ã–≤
if __name__ == "__main__":
    DBCtrl.create_tables()
    executor.start_polling(dp, skip_updates=True)
